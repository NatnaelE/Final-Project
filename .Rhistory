my_bday_intro <- make_birthday_intro("Cameron", 19, as.Date("2019/02/11"))
my_bday_intro
source('~/INFO201/a2-cameron-astor/assignment.R')
my_bday_intro
source('~/INFO201/a2-cameron-astor/assignment.R')
my_bday_intro
days_to_break
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
int days_to_break <- difftime(summer_break, today, c("days"))
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
new_age = age + 1
N = difftime(as.Date(birthday), as.Date(Sys.time()), c("days"))
result <- paste(make_introduction(name, age), "In", N, "days I'll be", new_age)
}
source('~/INFO201/a2-cameron-astor/assignment.R')
source('~/INFO201/a2-cameron-astor/assignment.R')
strings <- strings[strings != 1:9]
remove_digits <- function(strings) {
strings <- strings[strings != 1:9]
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO201", "CSE142"))
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
strings = strings[strings != 1:9]
remove_digits <- function(strings) {
strings = strings[strings != 1:9]
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
strings
}
gsub(1:9, "", strings)
remove_digits <- function(strings) {
gsub(1:9, "", strings)
}
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
gsub(1-9, "", strings)
}
test <- remove_digits(c("INFO201", "CSE142"))
test
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
gsub([1:9], "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
gsub(1:9, "", strings)
}
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
gsub("0123456789", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
gsub([0-9]+, "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
gsub([0-9], "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
gsub(0-9, "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
gsub("0", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
digits <- c(0:9)
remove_digits <- function(strings) {
digits <- c(0:9)
gsub(digits, "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
digits <- c(0:9, "")
remove_digits <- function(strings) {
digits <- c(0:9, "")
gsub(digits, "", strings)
}
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
digits <- c(0:9, "")
gsub(digits, "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
digits <- c(0:9, "")
grep(digits, "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
digits <- c(0:9, "")
gsub(digits, "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
digits <- c(0:9, "")
str_replace_all(strings, digits, "")
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
digits <- c(0:9, "")
str_replace_all(strings, "", digits)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
digits <- c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
gsub?
}
?gsub
?str_replace
remove_digits <- function(strings) {
digits <- c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
str_replace(strings, digits, "")
?str_replace
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
str_replace(strings, digits, "")
remove_digits <- function(strings) {
digits <- c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
str_replace(strings, digits, "")
}
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
digits <- c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
str_remove(strings, digits)
}
test <- remove_digits(c("INFO201", "CSE142"))
test
#digits <- c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
str_remove(strings, [0:9)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
#digits <- c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
str_remove(strings, [0:9])
#digits <- c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
str_remove(strings, 0:9)
#digits <- c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
str_remove(strings, 0-9)
remove_digits <- function(strings) {
digits <- c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
str_remove(strings, digits)
}
test <- remove_digits(c("INFO201", "CSE142"))
test
str_remove(strings, "0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
str_remove(strings, [0123456789])
remove_digits <- function(strings) {
digits <- c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")
str_remove(strings, "0123456789")
}
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
sub("[[:alnum:]]* ", "", strings)
}
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
result <- sub("[[:alnum:]]* ", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
result <- sub("[[:alnum:]]*", "", strings)
remove_digits <- function(strings) {
result <- sub("[[:alnum:]]*", "", strings)
}
test <- remove_digits(c("INFO201", "CSE142"))
test
test
remove_digits <- function(strings) {
result <- sub("[[:alnum:]]* ", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
result <- sub("[[:alnum:]]*", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
digits <- c([1:9], "'")
digits <- c(1:9, "'")
remove_digits <- function(strings) {
digits <- c(1:9, "'")
result <- sub(digits, "", strings)
}
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
result <- sub("[[:digit:]]* ", "", strings)
}
test <- remove_digits(c("INFO201", "CSE142"))
test
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(strings) {
result <- sub("[[:digits:]]* ", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
result <- sub("[:digit:]* ", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
result <- sub("[:digit:] ", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
result <- sub("[[:digit:]]* ", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
result <- sub("[[:digit:]]* ", "", strings)
}
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
result <- gsub("[[:digit:]]* ", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
result <- gsub("[[:digit:]]* ", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
remove_digits <- function(strings) {
result <- gsub("[[:digit:]]*", "", strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
test <- remove_digits(c("INFO201", "CSE142"))
test
test <- remove_digits(c("INFO201", "CSE142", "LING461"))
test
source('~/INFO201/a2-cameron-astor/assignment.R')
source('~/INFO201/a2-cameron-astor/assignment.R')
test
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO201", "CSE142", "LING461"))
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO201", "CSE142", "LING461")))
style_file(assignment.R)
style_file("assignment.R")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- difftime(summer_break, today, c("days"))
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro("Cameron", 19, "2019/02/11")
style_file()
style_file("assignment.R")
library("styler")
library("lintr")
style_file("assignment.R")
source('~/INFO201/a2-cameron-astor/assignment.R')
days_to_break
grades <- list()
grades <- list(
a1 = c(88, 89, 73)
a2 = c(94, 97, 84)
a3 = c(97, 75, 99)
)
grades <- list(
a1 = c(88, 89, 73),
a2 = c(94, 97, 84),
a3 = c(97, 75, 99)
)
View(grades)
lapply(grades, mean)
mean_grades <- lapply(grades, mean)
grades_df <- data.frame(grades)
grades_df
View(grades_df)
shiny::runApp('INFO201/Final-Project')
View(clean_food_data)
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
View(clean_population_data)
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
View(grouped_by_item)
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
grouped_by_item <- clean_food_data %>%
group_by(Item) %>%
filter(Area == "Afghanistan") %>%
filter(Item.Code != 21043,
Item.Code != 21032,
Item.Code != 21030 ) %>% #remove some indicators
filter(str_detect(Year.Code, "2000"))
item_names <- pull(select(grouped_by_item, Item))
View(grouped_by_item)
View(grouped_by_item)
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
grouped_by_item <- clean_food_data %>%
group_by(Item) %>%
filter(Area == "Afghanistan") %>%
filter(Item.Code == 21010,
Item.Code == 210011,
Item.Code == 21034,
Item.Code == 21033,
Item.Code == 21047,
Item.Code == 21048,
Item.Code == 21042) %>% #Select indicators
filter(str_detect(Year.Code, "2000"))
item_names <- pull(select(grouped_by_item, Item))
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
Vector of item names for the dropdown
grouped_by_item <- clean_food_data %>%
group_by(Item) %>%
filter(Area == "Afghanistan") %>%
filter(Item.Code == 21010,
# Item.Code == 210011)
Item.Code == 21034) %>%
# Item.Code == 21033,
# Item.Code == 21047,
# Item.Code == 21048,
# Item.Code == 21042)
#Select indicators
filter(str_detect(Year.Code, "2000"))
item_names <- pull(select(grouped_by_item, Item))
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
runApp('INFO201/Final-Project')
setwd("~/INFO201/Final-Project")
read.csv("data/country_region.csv", stringsAsFactors = FALSE)
country_region <- read.csv("data/country_region.csv", stringsAsFactors = FALSE)
View(country_region)
item_by_country <- clean_food_data %>%
# spread(key = Item, value = Value) %>%
group_by(Area) %>%
filter(Item == input$indicator) %>%
filter(str_detect(Year, input$year)) %>%
ungroup()
item_by_country$Value <- as.double(item_by_country$Value)
item_by_country <- item_by_country %>%
left_join(country_region)
item_by_country
item_by_country <- clean_food_data %>%
group_by(Area) %>%
filter(Item == input$indicator) %>%
filter(str_detect(Year, input$year)) %>%
ungroup()
item_by_country$Value <- as.double(item_by_country$Value)
item_by_country <- item_by_country %>%
left_join(country_region)
item_by_country
item_by_country <- clean_food_data %>%
group_by(Area) %>%
filter(Item == input$indicator) %>%
filter(str_detect(Year, input$year)) %>%
ungroup()
item_by_country$Value <- as.double(item_by_country$Value)
item_by_country <- item_by_country %>%
left_join(country_region)
runApp()
item_by_country <- clean_food_data %>%
group_by(Area) %>%
filter(Item.Code == 21010) %>%
filter(Year.Code == 20002002) %>%
ungroup()
item_by_country$Value <- as.double(item_by_country$Value)
item_by_country <- item_by_country %>%
left_join(country_region)
item_by_country
View(item_by_country)
item_by_country <- clean_food_data %>%
group_by(Area) %>%
filter(Item.Code == 21010) %>%
filter(Year.Code == 20002002) %>%
ungroup()
item_by_country$Value <- as.double(item_by_country$Value)
item_by_country <- item_by_country %>%
right_join(country_region)
item_by_country
View(item_by_country)
item_by_country <- clean_food_data %>%
group_by(Area) %>%
filter(Item.Code == 21010) %>%
filter(Year.Code == 20002002) %>%
ungroup()
item_by_country$Value <- as.double(item_by_country$Value)
item_by_country <- item_by_country %>%
right_join(country_region, by == Area)
item_by_country
runApp()
runApp()
runApp()
runApp()
country_region <- country_region %>%
select(name, region)
View(country_region)
runApp()
names(country_region) <- c("Area", "region")
View(country_region)
runApp()
View(item_by_country)
runApp()
style_file("server.R")
style_file("ui.R")
